From 5bb5c8a4fa9a102e585ede6ff26fd9106893bdbc Mon Sep 17 00:00:00 2001
From: Erickson Santos <erickson@lsd.ufcg.edu.br>
Date: Thu, 3 Sep 2015 15:24:53 -0300
Subject: [PATCH] Nested Quota: Set default values to subproject

In case of hierarchical projects set the default value
(for resources who have the resource flag set) for a
sub-project to zero. This patch adds this functionality for
hierarchical projects, while keeping the functionality
intact for non-hierarchical project. At the top level,
project resources will get the default values as imposed
by the "default" class settings.

Co-Authored-By: Raildo Mascena <raildo@lsd.ufcg.edu.br>
Co-Authored-By: Sajeesh CS <sajeesh.cs@cern.ch>
Co-Authored-By: Vilobh Meshram <vilobhmm@yahoo-inc.com>

Partially Implements:  bp nested-quota-driver-api

Change-Id: I326a81957ef78f85ba35345b4c64fae456ad5ffc
---
 nova/api/openstack/compute/quota_sets.py |  11 +-
 nova/db/api.py                           |  16 ++-
 nova/db/sqlalchemy/api.py                |  28 +++-
 nova/quota.py                            |  91 ++++++++-----
 nova/tests/unit/test_quota.py            | 220 +++++++++++++++++++++++++++++--
 5 files changed, 317 insertions(+), 49 deletions(-)

diff --git a/nova/api/openstack/compute/quota_sets.py b/nova/api/openstack/compute/quota_sets.py
index 8b616c2..e676088 100644
--- a/nova/api/openstack/compute/quota_sets.py
+++ b/nova/api/openstack/compute/quota_sets.py
@@ -70,12 +70,15 @@ class QuotaSetsController(wsgi.Controller):
                    {'limit': limit, 'resource': resource, 'maximum': maximum})
             raise webob.exc.HTTPBadRequest(explanation=msg)
 
-    def _get_quotas(self, context, id, user_id=None, usages=False):
+    def _get_quotas(self, context, id, user_id=None, usages=False,
+                    parent_project_id=None):
         if user_id:
             values = QUOTAS.get_user_quotas(context, id, user_id,
                                             usages=usages)
         else:
-            values = QUOTAS.get_project_quotas(context, id, usages=usages)
+            values = QUOTAS.get_project_quotas(
+                context, id, usages=usages,
+                parent_project_id=parent_project_id)
 
         if usages:
             return values
@@ -151,7 +154,9 @@ class QuotaSetsController(wsgi.Controller):
     def defaults(self, req, id):
         context = req.environ['nova.context']
         authorize(context, action='defaults', target={'project_id': id})
-        values = QUOTAS.get_defaults(context)
+        parent_project_id = None
+        values = QUOTAS.get_defaults(
+            context, parent_project_id=parent_project_id)
         return self._format_quota_set(id, values)
 
     # TODO(oomichi): Here should be 204(No Content) instead of 202 by v2.1
diff --git a/nova/db/api.py b/nova/db/api.py
index 641ed0a..e156436 100644
--- a/nova/db/api.py
+++ b/nova/db/api.py
@@ -1023,10 +1023,11 @@ def network_update(context, network_id, values):
 ###############
 
 
-def quota_create(context, project_id, resource, limit, user_id=None):
+def quota_create(context, project_id, resource, limit, user_id=None,
+        allocated=0):
     """Create a quota for the given project and resource."""
     return IMPL.quota_create(context, project_id, resource, limit,
-                             user_id=user_id)
+                             user_id=user_id, allocated=allocated)
 
 
 def quota_get(context, project_id, resource, user_id=None):
@@ -1055,6 +1056,17 @@ def quota_update(context, project_id, resource, limit, user_id=None):
                              user_id=user_id)
 
 
+def get_all_quota_allocated_by_project(context, project_id):
+    """Retrieve all allocated quotas associated with a given project."""
+    return IMPL.get_all_quota_allocated_by_project(context, project_id)
+
+
+def quota_allocated_update(context, project_id, resource, allocated):
+    """Update allocated quota to subprojects or raise if it does not exist."""
+    return IMPL.quota_allocated_update(context, project_id, resource,
+                                       allocated)
+
+
 ###################
 
 
diff --git a/nova/db/sqlalchemy/api.py b/nova/db/sqlalchemy/api.py
index aa31033..606f6f5 100644
--- a/nova/db/sqlalchemy/api.py
+++ b/nova/db/sqlalchemy/api.py
@@ -3177,6 +3177,16 @@ def quota_get_all_by_project(context, project_id):
 
 
 @require_context
+def get_all_quota_allocated_by_project(context, project_id):
+    rows = model_query(context, models.Quota, read_deleted='no').filter_by(
+            project_id=project_id).all()
+    result = {'project_id': project_id}
+    for row in rows:
+        result[row.resource] = row.allocated
+    return result
+
+
+@require_context
 def quota_get_all(context, project_id):
     result = model_query(context, models.ProjectUserQuota).\
                    filter_by(project_id=project_id).\
@@ -3185,7 +3195,8 @@ def quota_get_all(context, project_id):
     return result
 
 
-def quota_create(context, project_id, resource, limit, user_id=None):
+def quota_create(context, project_id, resource, limit, user_id=None,
+                 allocated=0):
     per_user = user_id and resource not in PER_PROJECT_QUOTAS
     quota_ref = models.ProjectUserQuota() if per_user else models.Quota()
     if per_user:
@@ -3193,6 +3204,7 @@ def quota_create(context, project_id, resource, limit, user_id=None):
     quota_ref.project_id = project_id
     quota_ref.resource = resource
     quota_ref.hard_limit = limit
+    quota_ref.allocated = allocated
     try:
         quota_ref.save()
     except db_exc.DBDuplicateEntry:
@@ -3218,6 +3230,20 @@ def quota_update(context, project_id, resource, limit, user_id=None):
             raise exception.ProjectQuotaNotFound(project_id=project_id)
 
 
+@require_context
+def quota_allocated_update(context, project_id, resource, allocated):
+    session = get_session()
+    model = models.Quota
+    query = model_query(context, model).\
+                filter_by(project_id=project_id).\
+                filter_by(resource=resource)
+    with session.begin():
+        result = query.update({'allocated': allocated})
+        if not result:
+            raise exception.ProjectQuotaNotFound(project_id=project_id)
+        return result
+
+
 ###################
 
 
diff --git a/nova/quota.py b/nova/quota.py
index 4c0d69d..2d6aec2 100644
--- a/nova/quota.py
+++ b/nova/quota.py
@@ -124,20 +124,25 @@ class DbQuotaDriver(object):
 
         return db.quota_class_get(context, quota_class, resource)
 
-    def get_defaults(self, context, resources):
+    def get_defaults(self, context, resources, parent_project_id=None):
         """Given a list of resources, retrieve the default quotas.
         Use the class quotas named `_DEFAULT_QUOTA_NAME` as default quotas,
         if it exists.
 
         :param context: The request context, for access checks.
         :param resources: A dictionary of the registered resources.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
         quotas = {}
-        default_quotas = db.quota_class_get_default(context)
+        default_quotas = {}
+        if not parent_project_id:
+            default_quotas = db.quota_class_get_default(context)
         for resource in resources.values():
             quotas[resource.name] = default_quotas.get(resource.name,
-                                                       resource.default)
+                                                       (0 if parent_project_id
+                                                       else resource.default))
 
         return quotas
 
@@ -166,7 +171,7 @@ class DbQuotaDriver(object):
 
     def _process_quotas(self, context, resources, project_id, quotas,
                         quota_class=None, defaults=True, usages=None,
-                        remains=False):
+                        remains=False, parent_project_id=None):
         modified_quotas = {}
         # Get the quotas for the appropriate class.  If the project ID
         # matches the one in the context, we use the quota_class from
@@ -179,8 +184,12 @@ class DbQuotaDriver(object):
         else:
             class_quotas = {}
 
-        default_quotas = self.get_defaults(context, resources)
+        default_quotas = self.get_defaults(context, resources,
+                                           parent_project_id=parent_project_id)
 
+        allocated_quotas = db.get_all_quota_allocated_by_project(
+                context, project_id)
+        allocated_quotas.pop('project_id')
         for resource in resources.values():
             # Omit default/quota class values
             if not defaults and resource.name not in quotas:
@@ -199,6 +208,10 @@ class DbQuotaDriver(object):
                     in_use=usage.get('in_use', 0),
                     reserved=usage.get('reserved', 0),
                     )
+                if parent_project_id or allocated_quotas:
+                    if modified_quotas[resource.name] is not None:
+                        modified_quotas[resource.name].update(
+                            allocated=allocated_quotas.get(resource.name, 0), )
             # Initialize remains quotas.
             if remains:
                 modified_quotas[resource.name].update(remains=limit)
@@ -261,7 +274,8 @@ class DbQuotaDriver(object):
 
     def get_project_quotas(self, context, resources, project_id,
                            quota_class=None, defaults=True,
-                           usages=True, remains=False, project_quotas=None):
+                           usages=True, remains=False, project_quotas=None,
+                           parent_project_id=None):
         """Given a list of resources, retrieve the quotas for the given
         project.
 
@@ -282,6 +296,8 @@ class DbQuotaDriver(object):
         :param remains: If True, the current remains of the project will
                         will be returned.
         :param project_quotas: Quotas dictionary for the specified project.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
         project_quotas = project_quotas or db.quota_get_all_by_project(
             context, project_id)
@@ -293,7 +309,8 @@ class DbQuotaDriver(object):
         return self._process_quotas(context, resources, project_id,
                                     project_quotas, quota_class,
                                     defaults=defaults, usages=project_usages,
-                                    remains=remains)
+                                    remains=remains,
+                                    parent_project_id=parent_project_id)
 
     def _is_unlimited_value(self, v):
         """A helper method to check for unlimited value.
@@ -320,7 +337,7 @@ class DbQuotaDriver(object):
         return v1 - v2
 
     def get_settable_quotas(self, context, resources, project_id,
-                            user_id=None):
+                            user_id=None, parent_project_id=None):
         """Given a list of resources, retrieve the range of settable quotas for
         the given user or project.
 
@@ -328,13 +345,15 @@ class DbQuotaDriver(object):
         :param resources: A dictionary of the registered resources.
         :param project_id: The ID of the project to return quotas for.
         :param user_id: The ID of the user to return quotas for.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
         settable_quotas = {}
         db_proj_quotas = db.quota_get_all_by_project(context, project_id)
         project_quotas = self.get_project_quotas(context, resources,
-                                                 project_id, remains=True,
-                                                 project_quotas=db_proj_quotas)
+            project_id, remains=True, project_quotas=db_proj_quotas,
+            parent_project_id=parent_project_id)
         if user_id:
             setted_quotas = db.quota_get_all_by_project_and_user(context,
                                                      project_id,
@@ -359,7 +378,7 @@ class DbQuotaDriver(object):
         return settable_quotas
 
     def _get_quotas(self, context, resources, keys, has_sync, project_id=None,
-                    user_id=None, project_quotas=None):
+                    user_id=None, project_quotas=None, parent_project_id=None):
         """A helper method which retrieves the quotas for the specific
         resources identified by keys, and which apply to the current
         context.
@@ -378,6 +397,8 @@ class DbQuotaDriver(object):
                         is admin and admin wants to impact on
                         common user.
         :param project_quotas: Quotas dictionary for the specified project.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
         # Filter resources
@@ -408,11 +429,10 @@ class DbQuotaDriver(object):
             LOG.debug('Getting quotas for project %(project_id)s. Resources: '
                       '%(keys)s', {'project_id': project_id, 'keys': keys})
             # Grab and return the quotas (without usages)
-            quotas = self.get_project_quotas(context, sub_resources,
-                                             project_id,
-                                             context.quota_class,
-                                             usages=False,
-                                             project_quotas=project_quotas)
+            quotas = self.get_project_quotas(
+                context, sub_resources, project_id, context.quota_class,
+                usages=False, project_quotas=project_quotas,
+                parent_project_id=parent_project_id)
 
         return {k: v['limit'] for k, v in quotas.items()}
 
@@ -966,17 +986,20 @@ class NoopQuotaDriver(object):
 class BaseResource(object):
     """Describe a single resource for quota checking."""
 
-    def __init__(self, name, flag=None):
+    def __init__(self, name, flag=None, parent_project_id=None):
         """Initializes a Resource.
 
         :param name: The name of the resource, i.e., "instances".
         :param flag: The name of the flag or configuration option
                      which specifies the default value of the quota
                      for this resource.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
         self.name = name
         self.flag = flag
+        self.parent_project_id = parent_project_id
 
     def quota(self, driver, context, **kwargs):
         """Given a driver and context, obtain the quota for this
@@ -1028,6 +1051,9 @@ class BaseResource(object):
     def default(self):
         """Return the default value of the quota."""
 
+        if self.parent_project_id:
+            return 0
+
         return CONF[self.flag] if self.flag else -1
 
 
@@ -1166,13 +1192,16 @@ class QuotaEngine(object):
 
         return self._driver.get_by_class(context, quota_class, resource)
 
-    def get_defaults(self, context):
+    def get_defaults(self, context, parent_project_id=None):
         """Retrieve the default quotas.
 
         :param context: The request context, for access checks.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
-        return self._driver.get_defaults(context, self._resources)
+        return self._driver.get_defaults(context, self._resources,
+                                         parent_project_id=parent_project_id)
 
     def get_class_quotas(self, context, quota_class, defaults=True):
         """Retrieve the quotas for the given quota class.
@@ -1213,7 +1242,8 @@ class QuotaEngine(object):
                                             usages=usages)
 
     def get_project_quotas(self, context, project_id, quota_class=None,
-                           defaults=True, usages=True, remains=False):
+                           defaults=True, usages=True, remains=False,
+                           parent_project_id=None):
         """Retrieve the quotas for the given project.
 
         :param context: The request context, for access checks.
@@ -1229,16 +1259,17 @@ class QuotaEngine(object):
                        will also be returned.
         :param remains: If True, the current remains of the project will
                         will be returned.
+        :param parent_project_id: The id of the current project's parent,
+                                  if any.
         """
 
-        return self._driver.get_project_quotas(context, self._resources,
-                                              project_id,
-                                              quota_class=quota_class,
-                                              defaults=defaults,
-                                              usages=usages,
-                                              remains=remains)
+        return self._driver.get_project_quotas(
+            context, self._resources, project_id, quota_class=quota_class,
+            defaults=defaults, usages=usages, remains=remains,
+            parent_project_id=parent_project_id)
 
-    def get_settable_quotas(self, context, project_id, user_id=None):
+    def get_settable_quotas(self, context, project_id, user_id=None,
+            parent_project_id=None):
         """Given a list of resources, retrieve the range of settable quotas for
         the given user or project.
 
@@ -1247,9 +1278,9 @@ class QuotaEngine(object):
         :param user_id: The ID of the user to return quotas for.
         """
 
-        return self._driver.get_settable_quotas(context, self._resources,
-                                                project_id,
-                                                user_id=user_id)
+        return self._driver.get_settable_quotas(
+           context, self._resources, project_id, user_id=user_id,
+           parent_project_id=parent_project_id)
 
     def count(self, context, resource, *args, **kwargs):
         """Count a resource.
diff --git a/nova/tests/unit/test_quota.py b/nova/tests/unit/test_quota.py
index 6534cf2..e260140 100644
--- a/nova/tests/unit/test_quota.py
+++ b/nova/tests/unit/test_quota.py
@@ -285,8 +285,9 @@ class FakeDriver(object):
         except KeyError:
             raise exception.QuotaClassNotFound(class_name=quota_class)
 
-    def get_defaults(self, context, resources):
-        self.called.append(('get_defaults', context, resources))
+    def get_defaults(self, context, resources, parent_project_id=None):
+        self.called.append(('get_defaults', context, resources,
+                            parent_project_id))
         return resources
 
     def get_class_quotas(self, context, resources, quota_class,
@@ -304,10 +305,10 @@ class FakeDriver(object):
 
     def get_project_quotas(self, context, resources, project_id,
                            quota_class=None, defaults=True, usages=True,
-                           remains=False):
+                           remains=False, parent_project_id=None):
         self.called.append(('get_project_quotas', context, resources,
                             project_id, quota_class, defaults, usages,
-                            remains))
+                            remains, parent_project_id))
         return resources
 
     def limit_check(self, context, resources, values, project_id=None,
@@ -413,6 +414,16 @@ class BaseResourceTestCase(test.TestCase):
 
         self.assertEqual(quota_value, 15)
 
+    def test_quota_override_subproject_no_class(self):
+        self.flags(quota_instances=10)
+        resource = quota.BaseResource('test_resource', 'quota_instances',
+                                      parent_project_id='test_parent_project')
+        driver = FakeDriver()
+        context = FakeContext('test_project', None)
+        quota_value = resource.quota(driver, context)
+
+        self.assertEqual(quota_value, 0)
+
     def test_quota_override_project_with_class(self):
         self.flags(quota_instances=10)
         resource = quota.BaseResource('test_resource', 'quota_instances')
@@ -577,11 +588,13 @@ class QuotaEngineTestCase(test.TestCase):
     def test_get_defaults(self):
         context = FakeContext(None, None)
         driver = FakeDriver()
+        parent_project_id = None
         quota_obj = self._make_quota_obj(driver)
         result = quota_obj.get_defaults(context)
 
         self.assertEqual(driver.called, [
-                ('get_defaults', context, quota_obj._resources),
+                ('get_defaults', context, quota_obj._resources,
+                 parent_project_id),
                 ])
         self.assertEqual(result, quota_obj._resources)
 
@@ -625,6 +638,7 @@ class QuotaEngineTestCase(test.TestCase):
     def test_get_project_quotas(self):
         context = FakeContext(None, None)
         driver = FakeDriver()
+        parent_project_id = None
         quota_obj = self._make_quota_obj(driver)
         result1 = quota_obj.get_project_quotas(context, 'test_project')
         result2 = quota_obj.get_project_quotas(context, 'test_project',
@@ -634,9 +648,37 @@ class QuotaEngineTestCase(test.TestCase):
 
         self.assertEqual(driver.called, [
                 ('get_project_quotas', context, quota_obj._resources,
-                 'test_project', None, True, True, False),
+                 'test_project', None, True, True, False,
+                 parent_project_id),
+                ('get_project_quotas', context, quota_obj._resources,
+                 'test_project', 'test_class', False, False, False,
+                 parent_project_id),
+                ])
+        self.assertEqual(result1, quota_obj._resources)
+        self.assertEqual(result2, quota_obj._resources)
+
+    def test_get_subproject_quotas(self):
+        context = FakeContext(None, None)
+        driver = FakeDriver()
+        parent_project_id = 'test_parent_project_id'
+        quota_obj = self._make_quota_obj(driver)
+        result1 = quota_obj.get_project_quotas(context, 'test_project',
+                                               parent_project_id=
+                                               parent_project_id)
+        result2 = quota_obj.get_project_quotas(context, 'test_project',
+                                               quota_class='test_class',
+                                               defaults=False,
+                                               usages=False,
+                                               parent_project_id=
+                                               parent_project_id)
+
+        self.assertEqual(driver.called, [
+                ('get_project_quotas', context, quota_obj._resources,
+                 'test_project', None, True, True, False,
+                 parent_project_id),
                 ('get_project_quotas', context, quota_obj._resources,
-                 'test_project', 'test_class', False, False, False),
+                 'test_project', 'test_class', False, False, False,
+                 parent_project_id),
                 ])
         self.assertEqual(result1, quota_obj._resources)
         self.assertEqual(result2, quota_obj._resources)
@@ -856,6 +898,29 @@ class DbQuotaDriverTestCase(test.TestCase):
                 server_group_members=10,
                 ))
 
+    def test_get_subproject_defaults(self):
+        # Test subproject default values
+        parent_project_id = 'test_parent_project_id'
+        result = self.driver.get_defaults(None, quota.QUOTAS._resources,
+                                          parent_project_id)
+
+        self.assertEqual(result, dict(
+                instances=0,
+                cores=0,
+                ram=0,
+                floating_ips=0,
+                fixed_ips=0,
+                metadata_items=0,
+                injected_files=0,
+                injected_file_content_bytes=0,
+                injected_file_path_bytes=0,
+                security_groups=0,
+                security_group_rules=0,
+                key_pairs=0,
+                server_groups=0,
+                server_group_members=0,
+                ))
+
     def _stub_quota_class_get_default(self):
         # Stub out quota_class_get_default
         def fake_qcgd(context):
@@ -1106,6 +1171,30 @@ class DbQuotaDriverTestCase(test.TestCase):
         self._stub_quota_class_get_all_by_name()
         self._stub_quota_class_get_default()
 
+    def _stub_get_by_subproject(self):
+        def fake_qgabp(context, project_id):
+            self.calls.append('quota_get_all_by_project')
+            self.assertEqual(project_id, 'test_project')
+            return dict(
+                cores=10,
+                injected_files=2,
+                injected_file_path_bytes=127,
+                )
+
+        def fake_qugabp(context, project_id):
+            self.calls.append('quota_usage_get_all_by_project')
+            self.assertEqual(project_id, 'test_project')
+            return dict(cores=dict(in_use=4, reserved=4),)
+
+        def fake_quota_get_all(context, project_id):
+            self.calls.append('quota_get_all')
+            self.assertEqual(project_id, 'test_project')
+            return []
+
+        self.stubs.Set(db, 'quota_get_all_by_project', fake_qgabp)
+        self.stubs.Set(db, 'quota_usage_get_all_by_project', fake_qugabp)
+        self.stubs.Set(db, 'quota_get_all', fake_quota_get_all)
+
     def test_get_project_quotas(self):
         self.maxDiff = None
         self._stub_get_by_project()
@@ -1192,6 +1281,106 @@ class DbQuotaDriverTestCase(test.TestCase):
                     ),
                 ))
 
+    def test_get_subproject_quotas(self):
+        self.maxDiff = None
+        self._stub_get_by_subproject()
+        parent_project_id = 'test_parent_project_id'
+        result = self.driver.get_project_quotas(
+            FakeContext('test_project', None),
+            quota.QUOTAS._resources, 'test_project',
+            parent_project_id=parent_project_id)
+
+        self.assertEqual(self.calls, [
+                'quota_get_all_by_project',
+                'quota_usage_get_all_by_project',
+                ])
+        self.assertEqual(result, dict(
+                instances=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                cores=dict(
+                    limit=10,
+                    in_use=4,
+                    reserved=4,
+                    allocated=0,
+                    ),
+                ram=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+               floating_ips=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                fixed_ips=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                metadata_items=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                injected_files=dict(
+                    limit=2,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                injected_file_content_bytes=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                injected_file_path_bytes=dict(
+                    limit=127,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                security_groups=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                security_group_rules=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                key_pairs=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                server_groups=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                server_group_members=dict(
+                    limit=0,
+                    in_use=0,
+                    reserved=0,
+                    allocated=0,
+                    ),
+                ))
+
     def test_get_project_quotas_with_remains(self):
         self.maxDiff = None
         self._stub_get_by_project()
@@ -1816,9 +2005,12 @@ class DbQuotaDriverTestCase(test.TestCase):
             return {'floating_ips': 20}
 
         def fake_get_project_quotas(context, resources, project_id,
-                                    quota_class=None, defaults=True,
-                                    usages=True, remains=False,
-                                    project_quotas=None):
+                                    quota_class=None,
+                                    defaults=True,
+                                    usages=True,
+                                    remains=False,
+                                    project_quotas=None,
+                                    parent_project_id=None):
             self.calls.append('get_project_quotas')
             result = {}
             for k, v in resources.items():
@@ -1875,11 +2067,12 @@ class DbQuotaDriverTestCase(test.TestCase):
         self.stubs.Set(db, 'quota_get_all_by_project_and_user',
                        fake_qgabpau)
 
-    def test_get_settable_quotas_with_user(self):
+    def test_get_settable_quotas_with_user(self, parent_project_id=None):
         self._stub_get_settable_quotas()
         result = self.driver.get_settable_quotas(
             FakeContext('test_project', 'test_class'),
-            quota.QUOTAS._resources, 'test_project', user_id='test_user')
+            quota.QUOTAS._resources, 'test_project', user_id='test_user',
+            parent_project_id=parent_project_id)
 
         self.assertEqual(self.calls, [
                 'quota_get_all_by_project',
@@ -2090,7 +2283,8 @@ class DbQuotaDriverTestCase(test.TestCase):
         def fake_get_project_quotas(context, resources, project_id,
                                     quota_class=None, defaults=True,
                                     usages=True, remains=False,
-                                    project_quotas=None):
+                                    project_quotas=None,
+                                    parent_project_id=None):
             self.calls.append('get_project_quotas')
             return {k: dict(limit=v.default) for k, v in resources.items()}
 
-- 
1.9.1

