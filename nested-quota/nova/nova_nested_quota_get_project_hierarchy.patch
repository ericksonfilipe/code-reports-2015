From d9d6e2133f37d703cdc596d05780440cc44e32ec Mon Sep 17 00:00:00 2001
From: Raildo Mascena <raildo@lsd.ufcg.edu.br>
Date: Fri, 6 Nov 2015 14:04:28 -0300
Subject: [PATCH] Nested Quota Driver: Get Hierarchy info

We are making calls to keystone in order to know the project hierarchy
and check whether a project is a root project or not.

Co-Authored-By: Sajeesh CS <sajeesh.cs@cern.ch>
Co-Authored-By: Erickson Santos <erickson@lsd.ufcg.edu.br>
Co-Authored-By: Vilobh Meshram <vilobhmm@yahoo-inc.com>

Partially Implements:  bp nested-quota-driver-api

Change-Id: I2c7fca005b71511abfa76e4f5adbfbcdf93995a7
---
 nova/context.py                 | 37 ++++++++++++++++++
 nova/tests/unit/test_context.py | 84 +++++++++++++++++++++++++++++++++++++++++
 2 files changed, 121 insertions(+)

diff --git a/nova/context.py b/nova/context.py
index 3ddbe6c..b564746 100644
--- a/nova/context.py
+++ b/nova/context.py
@@ -21,6 +21,7 @@ import copy
 
 from keystoneclient import auth
 from keystoneclient import service_catalog
+from keystoneclient.v3 import client
 from oslo_context import context
 from oslo_db.sqlalchemy import enginefacade
 from oslo_log import log as logging
@@ -212,6 +213,40 @@ class RequestContext(context.RequestContext):
         return "<Context %s>" % self.to_dict()
 
 
+class HierarchyInfo(context.RequestContext):
+
+    def _get_auth_parameters(self, context):
+        auth_url = None
+        plugin = _ContextAuthPlugin(context.auth_token,
+                                    context.service_catalog)
+        token = plugin.get_token()
+        for service in context.service_catalog:
+            if service.get('name') == 'keystone':
+                auth_url = service.get('links')['self']
+        if auth_url is None:
+            auth_url = 'http://localhost:5000/v3'
+        auth_param = {"token": token, "auth_url": auth_url}
+        return auth_param
+
+    def get_project(self, context, project_id, subtree=False):
+
+        """Helper function for return the project object when we can get the
+        parent_id and the subtree for its project.
+
+        :param context: The request context, for access checks
+        :param project_id: The ID of the project whose parent_id
+                           needs to be found out.
+        """
+        auth_params = self._get_auth_parameters(context)
+        token = auth_params.get("token")
+        auth_url = auth_params.get("auth_url")
+        keystone = client.Client(token=token, auth_url=auth_url,
+                                 project_id=context.project_id)
+        project = keystone.projects.get(project_id,
+                                        subtree_as_ids=subtree)
+        return project
+
+
 def get_admin_context(read_deleted="no"):
     return RequestContext(user_id=None,
                           project_id=None,
@@ -270,3 +305,5 @@ def authorize_quota_class_context(context, class_name):
             raise exception.Forbidden()
         elif context.quota_class != class_name:
             raise exception.Forbidden()
+
+HIERARCHY = HierarchyInfo()
diff --git a/nova/tests/unit/test_context.py b/nova/tests/unit/test_context.py
index 3a2215c..1391dc4 100644
--- a/nova/tests/unit/test_context.py
+++ b/nova/tests/unit/test_context.py
@@ -12,6 +12,9 @@
 #    License for the specific language governing permissions and limitations
 #    under the License.
 
+import mock
+import uuid
+
 from oslo_context import context as o_context
 from oslo_context import fixture as o_fixture
 
@@ -223,3 +226,84 @@ class ContextTestCase(test.NoDBTestCase):
         self.assertEqual('222', ctx.project_id)
         values2 = ctx.to_dict()
         self.assertEqual(values, values2)
+
+
+class HierarhcyInfoTestCase(test.NoDBTestCase):
+
+    class FakeProject(object):
+
+        def __init__(self, project_id='foo', parent_id=None):
+            self.project_id = project_id
+            self.parent_id = parent_id
+            self.subtree = None
+
+    def setUp(self):
+        super(HierarhcyInfoTestCase, self).setUp()
+        self.keystone = context.HIERARCHY
+
+        self.req = self.mox.CreateMockAnything()
+        self.req.environ = {'nova.context': context.get_admin_context()}
+        self.req.environ['nova.context'].is_admin = True
+        self.req.environ['nova.context'].auth_token = uuid.uuid4().hex
+        url = 'http://identity:5000/v3'
+        service = {'id': '123',
+                    'name': 'keystone',
+                    'links': {'self': url},
+                    'type': 'key-manager'}
+        self.req.environ['nova.context'].service_catalog = [service]
+        self._create_project_hierarchy()
+
+    def _create_project_hierarchy(self):
+        """Sets an environment used for nested quotas tests.
+        Create a project hierarchy such as follows:
+        +-----------+
+        |           |
+        |     A     |
+        |    / \    |
+        |   B   C   |
+        |  /        |
+        | D         |
+        +-----------+
+        """
+        self.A = self.FakeProject(project_id=uuid.uuid4().hex, parent_id=None)
+        self.B = self.FakeProject(project_id=uuid.uuid4().hex,
+                                  parent_id=self.A.project_id)
+        self.C = self.FakeProject(project_id=uuid.uuid4().hex,
+                                  parent_id=self.A.project_id)
+        self.D = self.FakeProject(project_id=uuid.uuid4().hex,
+                                  parent_id=self.B.project_id)
+
+        # update projects subtrees
+        self.B.subtree = {self.D.project_id: self.D.subtree}
+        self.A.subtree = {self.B.project_id: self.B.subtree,
+                          self.C.project_id: self.C.subtree}
+
+        # project_by_id attribute is used to recover a project based on its id.
+        self.project_by_id = {self.A.project_id: self.A,
+                              self.B.project_id: self.B,
+                              self.C.project_id: self.C,
+                              self.D.project_id: self.D}
+
+        self.parent_by_id = {self.A.project_id: self.A.parent_id,
+                             self.B.project_id: self.B.parent_id,
+                             self.C.project_id: self.C.parent_id,
+                             self.D.project_id: self.D.parent_id}
+
+    def _get_project(self, context, project_id, subtree=False):
+        return self.project_by_id.get(project_id, self.FakeProject())
+
+    def test_get_parent_project(self):
+        self.keystone.get_project = mock.Mock()
+        self.keystone.get_project.side_effect = self._get_project
+        ctx = self.req.environ['nova.context']
+        result = self.keystone.get_project(ctx, self.B.project_id)
+        self.assertEqual(result.parent_id, self.A.project_id)
+
+    def test_get_subtree(self):
+        self.keystone.get_project = mock.Mock()
+        self.keystone.get_project.side_effect = self._get_project
+        ctx = self.req.environ['nova.context']
+        result = self.keystone.get_project(ctx,
+                                           self.A.project_id,
+                                           subtree=True)
+        self.assertEqual(result.subtree, self.A.subtree)
-- 
1.9.1

